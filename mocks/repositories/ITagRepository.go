// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "news-topic-api/models"

	mock "github.com/stretchr/testify/mock"
)

// ITagRepository is an autogenerated mock type for the ITagRepository type
type ITagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tag
func (_m *ITagRepository) Create(tag models.Tag) (models.Tag, error) {
	ret := _m.Called(tag)

	var r0 models.Tag
	if rf, ok := ret.Get(0).(func(models.Tag) models.Tag); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Tag) error); ok {
		r1 = rf(tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tagID
func (_m *ITagRepository) Delete(tagID uint) error {
	ret := _m.Called(tagID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *ITagRepository) List() ([]models.Tag, error) {
	ret := _m.Called()

	var r0 []models.Tag
	if rf, ok := ret.Get(0).(func() []models.Tag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tagID, tag
func (_m *ITagRepository) Update(tagID uint, tag models.Tag) (models.Tag, error) {
	ret := _m.Called(tagID, tag)

	var r0 models.Tag
	if rf, ok := ret.Get(0).(func(uint, models.Tag) models.Tag); ok {
		r0 = rf(tagID, tag)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, models.Tag) error); ok {
		r1 = rf(tagID, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
