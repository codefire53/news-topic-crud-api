// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "news-topic-api/models"

	mock "github.com/stretchr/testify/mock"
)

// INewsRepository is an autogenerated mock type for the INewsRepository type
type INewsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: news
func (_m *INewsRepository) Create(news models.News) (models.News, error) {
	ret := _m.Called(news)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(models.News) models.News); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.News) error); ok {
		r1 = rf(news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: newsID
func (_m *INewsRepository) Delete(newsID uint) error {
	ret := _m.Called(newsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(newsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: penyitaanID
func (_m *INewsRepository) GetByID(penyitaanID uint) (models.News, error) {
	ret := _m.Called(penyitaanID)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(uint) models.News); ok {
		r0 = rf(penyitaanID)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(penyitaanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: queryParams
func (_m *INewsRepository) List(queryParams map[string]string) ([]models.News, error) {
	ret := _m.Called(queryParams)

	var r0 []models.News
	if rf, ok := ret.Get(0).(func(map[string]string) []models.News); ok {
		r0 = rf(queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newsID, news
func (_m *INewsRepository) Update(newsID uint, news models.News) (models.News, error) {
	ret := _m.Called(newsID, news)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(uint, models.News) models.News); ok {
		r0 = rf(newsID, news)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, models.News) error); ok {
		r1 = rf(newsID, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
